version: '3'
services:
  rabbitmq:
    image: rabbitmq:3.12.2-management
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - rabbit_network
    ports:
      - "5672:5672"
      - "15672:15672"

  db:
    image: 'mysql/mysql-server:latest'
    environment:
      MYSQL_ROOT_PASSWORD: 'password!23'
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: 'modelsDb'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - './volumes/database:/var/lib/mysql'
    ports:
      - "3307:3306"  
    networks:
      - rabbit_network

  socket.right:
    build: ./consumer/socket.instance
    volumes:
      - ./consumer/socket.instance:/usr/src/app
    command: sh -c " npm install && npm start "
    networks:
      - rabbit_network
    depends_on:
      - redis.socket
    environment:
      - SERVER_NAME=socket.right

  socket.left:
    build: ./consumer/socket.instance
    volumes:
      - ./consumer/socket.instance:/usr/src/app
    command: sh -c " npm install && npm start "
    networks:
      - rabbit_network
    depends_on:
      - redis.socket
    environment:
      - SERVER_NAME=socket.left

  admin:
    build:
      context: ./api/admin
      dockerfile: Dockerfile
    networks:
      - rabbit_network
    depends_on:
      - db
      - rabbitmq

  auth:
    build: ./api/auth
    volumes:
      - ./api/auth:/usr/src/app
    networks:
      - rabbit_network
    expose:
      - "4000"
    environment:
      - NAME=auth
    depends_on:
      - rabbitmq

  musician:
    build: ./api/musician
    volumes:
      - ./api/musician:/usr/src/app
    networks:
      - rabbit_network
    expose:
      - "4001"
    environment:
      - NAME=musician
    depends_on:
      - rabbitmq  

  public:
    build:
      context: ./api/public
      dockerfile: Dockerfile
    networks:
      - rabbit_network
    depends_on:
      - db
      - rabbitmq

  mailer:
    build: ./consumer/mailer
    command: sh -c "npm install && npm run start"
    volumes:
      - ./consumer/mailer:/usr/src/app
    networks:
      - rabbit_network
    expose:
      - "3000"
    environment:
      - NAME=mailer
    depends_on:
      - rabbitmq

  event.route:
    build: consumer/event.route
    command: sh -c "npm install && npm run start"
    volumes:
      - ./consumer/event.route:/usr/src/app
    networks:
      - rabbit_network
    expose:
      - "3000"
    environment:
      - NAME=event.route
    depends_on:
      - rabbitmq
      - redis.socket

  front.admin:
    build: ./frontend/admin
    command: sh -c "npm install && npm run dev"
    volumes:
      - ./frontend/admin:/usr/src/app
    networks:
      - rabbit_network

  front.public:
    build: ./frontend/public
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    command: sh -c "npm install && npm run dev"
    volumes:
      - ./frontend/public:/usr/src/app
    networks:
      - rabbit_network

  socket.emitter:
    build: ./consumer/socket.emitter
    command: sh -c "npm install && npm run start"
    volumes:
      - ./consumer/socket.emitter:/usr/src/app
    networks:
      - rabbit_network
    expose:
      - "3000"
    environment:
      - NAME=emitter
    depends_on:
      - rabbitmq
      - redis.socket

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - rabbit_network
    depends_on:
      - db
      - admin
      - mailer
      - rabbitmq
      - auth
      - swagger-ui
    ports:
      - "80:80"

  redis.socket:
    image: 'redis:alpine'
    volumes:
      - './volumes/db/redis/sockets:/data'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    networks:
      - rabbit_network
    
  swagger-ui:
    image: swaggerapi/swagger-ui
    ports:
      - "8081:8080"
    container_name: musicbox-swaggerapi  
    environment:
       NAME: "swagger"
       URLS: "[{ url: '/doc/authorization.json', name: 'Authorization'},
              { url: '/doc/registration.json', name: 'Registration'},]"
    volumes:
      - ./docs:/usr/share/nginx/html/doc
    extra_hosts:
      - 'host.docker.internal:host-gateway' 
    networks:
      - rabbit_network


networks:
  rabbit_network:
    driver: bridge
